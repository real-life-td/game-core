package world

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// Code generated by tools/operation-generator.go DO NOT EDIT
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

type MobInitOperation struct {
	PutKeyAttributes      *MobAttribute
	PutValueAttributes    interface{}
	PutMultipleAttributes map[MobAttribute]interface{}
	DeleteAttributes      []MobAttribute
}
type MobOperation struct {
	PutKeyAttributes      *MobAttribute
	PutValueAttributes    interface{}
	PutMultipleAttributes map[MobAttribute]interface{}
	DeleteAttributes      []MobAttribute
}
type MobDelta struct {
	NewAttributes     map[MobAttribute]interface{}
	DeletedAttributes []MobAttribute
}

func (m *Mob) InitOperation(o *MobInitOperation) {
	if o.DeleteAttributes != nil {
		for _, toDelete := range o.DeleteAttributes {
			delete(m.attributes, toDelete)
		}
	}
	if o.PutKeyAttributes != nil {
		m.attributes[*o.PutKeyAttributes] = o.PutValueAttributes
	}
	if o.PutMultipleAttributes != nil {
		for key, value := range o.PutMultipleAttributes {
			m.attributes[key] = value
		}
	}
}
func (m *Mob) Operation(o *MobOperation) *MobDelta {
	delta := new(MobDelta)
	if o.DeleteAttributes != nil {
		for _, toDelete := range o.DeleteAttributes {
			delete(m.attributes, toDelete)
			if delta.DeletedAttributes == nil {
				delta.DeletedAttributes = make([]MobAttribute, 0)
			}
			delta.DeletedAttributes = append(delta.DeletedAttributes, toDelete)
		}
	}
	if o.PutKeyAttributes != nil {
		m.attributes[*o.PutKeyAttributes] = o.PutValueAttributes
		if delta.NewAttributes == nil {
			delta.NewAttributes = make(map[MobAttribute]interface{})
		}
		delta.NewAttributes[*o.PutKeyAttributes] = o.PutValueAttributes
	}
	if o.PutMultipleAttributes != nil {
		for key, value := range o.PutMultipleAttributes {
			m.attributes[key] = value
			if delta.NewAttributes == nil {
				delta.NewAttributes = make(map[MobAttribute]interface{})
			}
			delta.NewAttributes[key] = value
		}
	}
	return delta
}
